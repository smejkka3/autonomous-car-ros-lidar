TrajectoryPlannerROS:
  odom_topic: odom

  max_vel_x: 2.0 # The maximum x velocity for the robot in m/s
  min_vel_x: 0.0 # The minimum x velocity for the robot in m/s

  acc_lim_x: 2.0 # The acceleration limit of the robot in the x direction
  acc_lim_theta: 1.0 # The acceleration limit of the robot in the theta direction

  max_vel_theta: 2.0 # The absolute value of the maximum rotational velocity for the robot in rad/s
  min_vel_theta: 0.0 # The absolute value of the minimum rotational velocity for the robot in rad/s
  min_in_place_vel_theta: 0.0 # The absolute value of the minimum in-place rotational velocity the controller will explore

  sim_time: 1.5 # The amount of time to roll trajectories out for in seconds", 1.7, 0, 10)
  sim_granularity: 0.1 # The granularity with which to check for collisions along each trajectory in meters", 0.025, 0, 5)
  angular_sim_granularity: 0.05 # The distance between simulation points for angular velocity should be small enough that the robot doesn't hit things", 0.025, 0, pi/2)

  xy_goal_tolerance: 0.1
  yaw_goal_tolerance: 0.5
  latch_xy_goal_tolerance: true

  meter_scoring: true
  pdist_scale: 0.6 # The weight for the path distance part of the cost function", 0.6, 0, 5)
  gdist_scale: 0.6 # The weight for the goal distance part of the cost function", 0.8, 0, 5)
  occdist_scale: 1.0 # The weight for the obstacle distance part of the cost function", 0.01, 0, 5)

  oscillation_reset_dist: 0.05 # The distance the robot must travel before oscillation flags are reset, in meters", 0.05, 0, 5)
  escape_reset_dist: 0.1 # The distance the robot must travel before oscillation flags are reset, in meters", 0.10, 0, 5)
  escape_reset_theta: pi/2 # The distance the robot must travel before oscillation flags are reset, in meters", pi/2, 0, 5)

  vx_samples: 15 # The number of samples to use when exploring the x velocity space", 20, 1, 300)
  vtheta_samples: 30 # The number of samples to use when exploring the theta velocity space", 20, 1, 300)

  heading_lookahead: 1.0 # How far the robot should look ahead of itself when differentiating between different rotational velocities
  holonomic_robot: False
  escape_vel: -1.0 # The velocity to use while backing up

  dwa: False #Set this to true to use the Dynamic Window Approach, false to use acceleration limits
  heading_scoring: False # Set this to true to use the Dynamic Window Approach, false to use acceleration limits
  heading_scoring_timestep: 0.1 # How far to look ahead in time when we score heading based trajectories

  simple_attractor: False # Set this to true to allow simple attraction to a goal point instead of intelligent cost propagation