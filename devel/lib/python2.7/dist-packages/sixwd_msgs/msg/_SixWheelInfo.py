# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sixwd_msgs/SixWheelInfo.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SixWheelInfo(genpy.Message):
  _md5sum = "c4dc9fd6e27eb023af6f7e522d9e61ed"
  _type = "sixwd_msgs/SixWheelInfo"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
int16 linearspeed   #Linear Speed or right or left speed with angle
int16 motor1_speed #Individual Speed info from each motor
int16 motor2_speed
int16 motor3_speed
int16 motor4_speed
int16 motor5_speed
int16 motor6_speed
int16 motor1_current
int16 motor2_current
int16 motor3_current
int16 motor4_current
int16 motor5_current
int16 motor6_current
int16 voltage  #Battery voltage reading and temperature
int16 temperature"""
  __slots__ = ['linearspeed','motor1_speed','motor2_speed','motor3_speed','motor4_speed','motor5_speed','motor6_speed','motor1_current','motor2_current','motor3_current','motor4_current','motor5_current','motor6_current','voltage','temperature']
  _slot_types = ['int16','int16','int16','int16','int16','int16','int16','int16','int16','int16','int16','int16','int16','int16','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       linearspeed,motor1_speed,motor2_speed,motor3_speed,motor4_speed,motor5_speed,motor6_speed,motor1_current,motor2_current,motor3_current,motor4_current,motor5_current,motor6_current,voltage,temperature

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SixWheelInfo, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.linearspeed is None:
        self.linearspeed = 0
      if self.motor1_speed is None:
        self.motor1_speed = 0
      if self.motor2_speed is None:
        self.motor2_speed = 0
      if self.motor3_speed is None:
        self.motor3_speed = 0
      if self.motor4_speed is None:
        self.motor4_speed = 0
      if self.motor5_speed is None:
        self.motor5_speed = 0
      if self.motor6_speed is None:
        self.motor6_speed = 0
      if self.motor1_current is None:
        self.motor1_current = 0
      if self.motor2_current is None:
        self.motor2_current = 0
      if self.motor3_current is None:
        self.motor3_current = 0
      if self.motor4_current is None:
        self.motor4_current = 0
      if self.motor5_current is None:
        self.motor5_current = 0
      if self.motor6_current is None:
        self.motor6_current = 0
      if self.voltage is None:
        self.voltage = 0
      if self.temperature is None:
        self.temperature = 0
    else:
      self.linearspeed = 0
      self.motor1_speed = 0
      self.motor2_speed = 0
      self.motor3_speed = 0
      self.motor4_speed = 0
      self.motor5_speed = 0
      self.motor6_speed = 0
      self.motor1_current = 0
      self.motor2_current = 0
      self.motor3_current = 0
      self.motor4_current = 0
      self.motor5_current = 0
      self.motor6_current = 0
      self.voltage = 0
      self.temperature = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_15h().pack(_x.linearspeed, _x.motor1_speed, _x.motor2_speed, _x.motor3_speed, _x.motor4_speed, _x.motor5_speed, _x.motor6_speed, _x.motor1_current, _x.motor2_current, _x.motor3_current, _x.motor4_current, _x.motor5_current, _x.motor6_current, _x.voltage, _x.temperature))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 30
      (_x.linearspeed, _x.motor1_speed, _x.motor2_speed, _x.motor3_speed, _x.motor4_speed, _x.motor5_speed, _x.motor6_speed, _x.motor1_current, _x.motor2_current, _x.motor3_current, _x.motor4_current, _x.motor5_current, _x.motor6_current, _x.voltage, _x.temperature,) = _get_struct_15h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_15h().pack(_x.linearspeed, _x.motor1_speed, _x.motor2_speed, _x.motor3_speed, _x.motor4_speed, _x.motor5_speed, _x.motor6_speed, _x.motor1_current, _x.motor2_current, _x.motor3_current, _x.motor4_current, _x.motor5_current, _x.motor6_current, _x.voltage, _x.temperature))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 30
      (_x.linearspeed, _x.motor1_speed, _x.motor2_speed, _x.motor3_speed, _x.motor4_speed, _x.motor5_speed, _x.motor6_speed, _x.motor1_current, _x.motor2_current, _x.motor3_current, _x.motor4_current, _x.motor5_current, _x.motor6_current, _x.voltage, _x.temperature,) = _get_struct_15h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_15h = None
def _get_struct_15h():
    global _struct_15h
    if _struct_15h is None:
        _struct_15h = struct.Struct("<15h")
    return _struct_15h
