# Autogenerated param section. Do not hand edit.
param {
group.0 {
name=Dynamically Reconfigurable Parameters
desc=See the [[dynamic_reconfigure]] package for details on dynamically reconfigurable parameters.
0.name= ~min_throttle
0.default= 0.2
0.type= double
0.desc=Specifies the minimum speed. Range: 0.0 to 1.0
1.name= ~max_throttle
1.default= 1.0
1.type= double
1.desc=Specifies the maximum speed. Range: 0.0 to 1.0
2.name= ~radius_lower
2.default= 2.0
2.type= double
2.desc=Specifies a lower radius, used to calculate a speed limit. Range: 0.001 to std::numeric_limits<double>::infinity()
3.name= ~radius_upper
3.default= 30.0
3.type= double
3.desc=Specifies a upper radius, used to calculate a speed limit. Range: 0.001 to std::numeric_limits<double>::infinity()
4.name= ~steering_slow_down
4.default= 4.0
4.type= double
4.desc=Used to calculate the speed limit error. Range: 0.0 to std::numeric_limits<double>::infinity()
5.name= ~steering_slow_down_dead_zone
5.default= 0.2
5.type= double
5.desc=Used to calculate the speed limit error. Range: 0.0 to std::numeric_limits<double>::infinity()
6.name= ~high_speed_steering_limit
6.default= 0.5
6.type= double
6.desc=Used to calculate the steering angle. Range: 0.0 to std::numeric_limits<double>::infinity()
7.name= ~high_speed_steering_limit_dead_zone
7.default= 0.2
7.type= double
7.desc=Used to calculate the steering angle. Range: 0.0 to std::numeric_limits<double>::infinity()
8.name= ~max_acceleration
8.default= 0.4
8.type= double
8.desc=Specifies the maximum acceleration. Range: 0.0 to std::numeric_limits<double>::infinity()
9.name= ~corner_cutting
9.default= 1.4
9.type= double
9.desc=Used to calculate the predicted car position. Range: 0.0 to std::numeric_limits<double>::infinity()
10.name= ~straight_smoothing
10.default= 1.0
10.type= double
10.desc=Used to calculate the predicted car position. Range: 0.0 to std::numeric_limits<double>::infinity()
11.name= ~barrier_size_realtive
11.default= 0.1
11.type= double
11.desc=Used to calculate the start and end point of the barrier. The barrier is the distance the car can drive straight. Range: 0.0 to std::numeric_limits<double>::infinity()
12.name= ~barrier_lower_limit
12.default= 1.0
12.type= double
12.desc=Used to calulate the speed limit at the end of straight track sections. Range: 0.0 to std::numeric_limits<double>::infinity()
13.name= ~barrier_upper_limit
13.default= 15.0
13.type= double
13.desc=Used to calulate the speed limit at the end of straight track sections. Range: 0.0 to std::numeric_limits<double>::infinity()
14.name= ~barrier_exponent
14.default= 1.4
14.type= double
14.desc=Used to calulate the speed limit at the end of straight track sections. Range: 0.0 to std::numeric_limits<double>::infinity()
15.name= ~controller_p
15.default= 4.0
15.type= double
15.desc=Specifies the proportional value of the PID controller. Range: -std::numeric_limits<double>::infinity() to std::numeric_limits<double>::infinity()
16.name= ~controller_i
16.default= 0.2
16.type= double
16.desc=Specifies the integral value of the PID controller. Range: -std::numeric_limits<double>::infinity() to std::numeric_limits<double>::infinity()
17.name= ~controller_d
17.default= 0.02
17.type= double
17.desc=Specifies the derivative value of the PID controller. Range: -std::numeric_limits<double>::infinity() to std::numeric_limits<double>::infinity()
18.name= ~usable_laser_range
18.default= 220.0
18.type= double
18.desc=The size of the part of the laser scan that should be used by the algorithm, in degrees. Range: 90.0 to 271.0
}
}
# End of autogenerated section. You may edit below.
