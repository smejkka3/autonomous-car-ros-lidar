// Generated by gencpp from file sixwd_msgs/SixWheelInfo.msg
// DO NOT EDIT!


#ifndef SIXWD_MSGS_MESSAGE_SIXWHEELINFO_H
#define SIXWD_MSGS_MESSAGE_SIXWHEELINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sixwd_msgs
{
template <class ContainerAllocator>
struct SixWheelInfo_
{
  typedef SixWheelInfo_<ContainerAllocator> Type;

  SixWheelInfo_()
    : linearspeed(0)
    , motor1_speed(0)
    , motor2_speed(0)
    , motor3_speed(0)
    , motor4_speed(0)
    , motor5_speed(0)
    , motor6_speed(0)
    , motor1_current(0)
    , motor2_current(0)
    , motor3_current(0)
    , motor4_current(0)
    , motor5_current(0)
    , motor6_current(0)
    , voltage(0)
    , temperature(0)  {
    }
  SixWheelInfo_(const ContainerAllocator& _alloc)
    : linearspeed(0)
    , motor1_speed(0)
    , motor2_speed(0)
    , motor3_speed(0)
    , motor4_speed(0)
    , motor5_speed(0)
    , motor6_speed(0)
    , motor1_current(0)
    , motor2_current(0)
    , motor3_current(0)
    , motor4_current(0)
    , motor5_current(0)
    , motor6_current(0)
    , voltage(0)
    , temperature(0)  {
  (void)_alloc;
    }



   typedef int16_t _linearspeed_type;
  _linearspeed_type linearspeed;

   typedef int16_t _motor1_speed_type;
  _motor1_speed_type motor1_speed;

   typedef int16_t _motor2_speed_type;
  _motor2_speed_type motor2_speed;

   typedef int16_t _motor3_speed_type;
  _motor3_speed_type motor3_speed;

   typedef int16_t _motor4_speed_type;
  _motor4_speed_type motor4_speed;

   typedef int16_t _motor5_speed_type;
  _motor5_speed_type motor5_speed;

   typedef int16_t _motor6_speed_type;
  _motor6_speed_type motor6_speed;

   typedef int16_t _motor1_current_type;
  _motor1_current_type motor1_current;

   typedef int16_t _motor2_current_type;
  _motor2_current_type motor2_current;

   typedef int16_t _motor3_current_type;
  _motor3_current_type motor3_current;

   typedef int16_t _motor4_current_type;
  _motor4_current_type motor4_current;

   typedef int16_t _motor5_current_type;
  _motor5_current_type motor5_current;

   typedef int16_t _motor6_current_type;
  _motor6_current_type motor6_current;

   typedef int16_t _voltage_type;
  _voltage_type voltage;

   typedef int16_t _temperature_type;
  _temperature_type temperature;





  typedef boost::shared_ptr< ::sixwd_msgs::SixWheelInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sixwd_msgs::SixWheelInfo_<ContainerAllocator> const> ConstPtr;

}; // struct SixWheelInfo_

typedef ::sixwd_msgs::SixWheelInfo_<std::allocator<void> > SixWheelInfo;

typedef boost::shared_ptr< ::sixwd_msgs::SixWheelInfo > SixWheelInfoPtr;
typedef boost::shared_ptr< ::sixwd_msgs::SixWheelInfo const> SixWheelInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sixwd_msgs::SixWheelInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sixwd_msgs::SixWheelInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace sixwd_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsMessage': True, 'IsFixedSize': True, 'HasHeader': False}
// {'sixwd_msgs': ['/home/karel/Documents/University/WS2019/AAIP/software_integration/src/sixwd_msgs/src/sixwd_msgs/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsMessage< ::sixwd_msgs::SixWheelInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sixwd_msgs::SixWheelInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sixwd_msgs::SixWheelInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sixwd_msgs::SixWheelInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sixwd_msgs::SixWheelInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sixwd_msgs::SixWheelInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sixwd_msgs::SixWheelInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c4dc9fd6e27eb023af6f7e522d9e61ed";
  }

  static const char* value(const ::sixwd_msgs::SixWheelInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc4dc9fd6e27eb023ULL;
  static const uint64_t static_value2 = 0xaf6f7e522d9e61edULL;
};

template<class ContainerAllocator>
struct DataType< ::sixwd_msgs::SixWheelInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sixwd_msgs/SixWheelInfo";
  }

  static const char* value(const ::sixwd_msgs::SixWheelInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sixwd_msgs::SixWheelInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"int16 linearspeed   #Linear Speed or right or left speed with angle\n"
"int16 motor1_speed #Individual Speed info from each motor\n"
"int16 motor2_speed\n"
"int16 motor3_speed\n"
"int16 motor4_speed\n"
"int16 motor5_speed\n"
"int16 motor6_speed\n"
"int16 motor1_current\n"
"int16 motor2_current\n"
"int16 motor3_current\n"
"int16 motor4_current\n"
"int16 motor5_current\n"
"int16 motor6_current\n"
"int16 voltage  #Battery voltage reading and temperature\n"
"int16 temperature\n"
;
  }

  static const char* value(const ::sixwd_msgs::SixWheelInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sixwd_msgs::SixWheelInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.linearspeed);
      stream.next(m.motor1_speed);
      stream.next(m.motor2_speed);
      stream.next(m.motor3_speed);
      stream.next(m.motor4_speed);
      stream.next(m.motor5_speed);
      stream.next(m.motor6_speed);
      stream.next(m.motor1_current);
      stream.next(m.motor2_current);
      stream.next(m.motor3_current);
      stream.next(m.motor4_current);
      stream.next(m.motor5_current);
      stream.next(m.motor6_current);
      stream.next(m.voltage);
      stream.next(m.temperature);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SixWheelInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sixwd_msgs::SixWheelInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sixwd_msgs::SixWheelInfo_<ContainerAllocator>& v)
  {
    s << indent << "linearspeed: ";
    Printer<int16_t>::stream(s, indent + "  ", v.linearspeed);
    s << indent << "motor1_speed: ";
    Printer<int16_t>::stream(s, indent + "  ", v.motor1_speed);
    s << indent << "motor2_speed: ";
    Printer<int16_t>::stream(s, indent + "  ", v.motor2_speed);
    s << indent << "motor3_speed: ";
    Printer<int16_t>::stream(s, indent + "  ", v.motor3_speed);
    s << indent << "motor4_speed: ";
    Printer<int16_t>::stream(s, indent + "  ", v.motor4_speed);
    s << indent << "motor5_speed: ";
    Printer<int16_t>::stream(s, indent + "  ", v.motor5_speed);
    s << indent << "motor6_speed: ";
    Printer<int16_t>::stream(s, indent + "  ", v.motor6_speed);
    s << indent << "motor1_current: ";
    Printer<int16_t>::stream(s, indent + "  ", v.motor1_current);
    s << indent << "motor2_current: ";
    Printer<int16_t>::stream(s, indent + "  ", v.motor2_current);
    s << indent << "motor3_current: ";
    Printer<int16_t>::stream(s, indent + "  ", v.motor3_current);
    s << indent << "motor4_current: ";
    Printer<int16_t>::stream(s, indent + "  ", v.motor4_current);
    s << indent << "motor5_current: ";
    Printer<int16_t>::stream(s, indent + "  ", v.motor5_current);
    s << indent << "motor6_current: ";
    Printer<int16_t>::stream(s, indent + "  ", v.motor6_current);
    s << indent << "voltage: ";
    Printer<int16_t>::stream(s, indent + "  ", v.voltage);
    s << indent << "temperature: ";
    Printer<int16_t>::stream(s, indent + "  ", v.temperature);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SIXWD_MSGS_MESSAGE_SIXWHEELINFO_H
