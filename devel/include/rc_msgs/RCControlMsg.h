// Generated by gencpp from file rc_msgs/RCControlMsg.msg
// DO NOT EDIT!


#ifndef RC_MSGS_MESSAGE_RCCONTROLMSG_H
#define RC_MSGS_MESSAGE_RCCONTROLMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rc_msgs
{
template <class ContainerAllocator>
struct RCControlMsg_
{
  typedef RCControlMsg_<ContainerAllocator> Type;

  RCControlMsg_()
    : throttle_cmd(0)
    , steering_cmd(0)  {
    }
  RCControlMsg_(const ContainerAllocator& _alloc)
    : throttle_cmd(0)
    , steering_cmd(0)  {
  (void)_alloc;
    }



   typedef int32_t _throttle_cmd_type;
  _throttle_cmd_type throttle_cmd;

   typedef int32_t _steering_cmd_type;
  _steering_cmd_type steering_cmd;





  typedef boost::shared_ptr< ::rc_msgs::RCControlMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rc_msgs::RCControlMsg_<ContainerAllocator> const> ConstPtr;

}; // struct RCControlMsg_

typedef ::rc_msgs::RCControlMsg_<std::allocator<void> > RCControlMsg;

typedef boost::shared_ptr< ::rc_msgs::RCControlMsg > RCControlMsgPtr;
typedef boost::shared_ptr< ::rc_msgs::RCControlMsg const> RCControlMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rc_msgs::RCControlMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rc_msgs::RCControlMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rc_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsMessage': True, 'IsFixedSize': True, 'HasHeader': False}
// {'rc_msgs': ['/home/karel/Documents/University/WS2019/AAIP/software_integration/src/rc_msgs/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsMessage< ::rc_msgs::RCControlMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rc_msgs::RCControlMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rc_msgs::RCControlMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rc_msgs::RCControlMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rc_msgs::RCControlMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rc_msgs::RCControlMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rc_msgs::RCControlMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dc4cb0d59f80caaf2e977b6feae39f15";
  }

  static const char* value(const ::rc_msgs::RCControlMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdc4cb0d59f80caafULL;
  static const uint64_t static_value2 = 0x2e977b6feae39f15ULL;
};

template<class ContainerAllocator>
struct DataType< ::rc_msgs::RCControlMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rc_msgs/RCControlMsg";
  }

  static const char* value(const ::rc_msgs::RCControlMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rc_msgs::RCControlMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 throttle_cmd\n"
"int32 steering_cmd\n"
;
  }

  static const char* value(const ::rc_msgs::RCControlMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rc_msgs::RCControlMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.throttle_cmd);
      stream.next(m.steering_cmd);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RCControlMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rc_msgs::RCControlMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rc_msgs::RCControlMsg_<ContainerAllocator>& v)
  {
    s << indent << "throttle_cmd: ";
    Printer<int32_t>::stream(s, indent + "  ", v.throttle_cmd);
    s << indent << "steering_cmd: ";
    Printer<int32_t>::stream(s, indent + "  ", v.steering_cmd);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RC_MSGS_MESSAGE_RCCONTROLMSG_H
